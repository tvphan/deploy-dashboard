#!/usr/bin/env python

"""
docker-purge - Removes all the orphaned / invalid images and remove running containers.
"""

import optparse as op
import subprocess
import sys

USAGE = "%prog [OPTIONS]"

def _purge_containers(verbose=False):
    """
    Delete all running containers

    :param verbose: If True, generates additional output (Default: False).

    """
    func_name = sys._getframe().f_code.co_name
    proc = subprocess.Popen(['docker','ps','-a'],stdout=subprocess.PIPE)

    while True:
        line = proc.stdout.readline().rstrip()
        if line != '':
            fields = line.split()
            if verbose:
                print ("{0}: Processing {1}".format(func_name, fields))
            if ((fields[0] != "CONTAINER")):
                subprocess.call(['docker','rm','-f', fields[0]],stdout=subprocess.PIPE)
                if verbose:
                    print ("{0}: Deleting container {1}".format(func_name, fields[0]))

        else:
            break

def _purge_images(verbose=False):
    """
    Delete orphaned / unreachable images

    :param verbose: If True, generates additional output (Default: False).

    """
    func_name = sys._getframe().f_code.co_name
    proc = subprocess.Popen(['docker','images'],stdout=subprocess.PIPE)

    while True:
        line = proc.stdout.readline().rstrip()
        if line != '':
            fields = line.split()
            if verbose:
                print ("{0}: Processing {1}". format(func_name, fields))

            if ((fields[0] == "<none>")):
                subprocess.call(['docker','rmi','-f', fields[2]],stdout=subprocess.PIPE)
                if verbose:
                    print ("{0}: Deleting image {1}".format(func_name, fields[2]))

        else:
            break

def _options():
    """
    Returns the program options.

    :return: List of options.
    """
    return [
        op.make_option("-v", "--verbose", dest="verbose", default=False,
                       action="store_true", help="Enable verbose output.")
    ]

def main():
    parser = op.OptionParser(usage=USAGE, option_list=_options())
    opts, args = parser.parse_args()
    if len(args) > 0:
        parser.error("Unknown arguments: " + ", ".join(args[0:]))

    _purge_containers(opts.verbose)
    _purge_images(opts.verbose)

if __name__ == "__main__":
    main()
