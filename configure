#!/usr/bin/env python

import optparse as op
import os
import errno
import shutil
import subprocess as sp
import string
import jinja2
import yaml
import platform

USAGE = "%prog [OPTIONS]"

OS = {
    'centos6': ('centos', 'centos6'),
    'lucid': ('ubuntu', '10.04'),
    'precise': ('ubuntu', '12.04'),
    'trusty': ('ubuntu', '14.04'),
    'squeeze': ('debian', '6.0'),
    'wheezy': ('debian', '7.0'),
    'jessie': ('debian', '8.0'),
}

def copyanything(src, dst):
    if os.path.isdir(dst):
        shutil.rmtree(dst)
    elif os.path.isfile(dst):
        os.remove(dst)

    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise

def setup_deps():
    home = os.path.expanduser("~")
    fname = os.path.join(home,".ssh/id_rsa")
    if os.path.isfile(fname) and os.access(fname, os.R_OK):
        shutil.copyfile(fname,"shared/id_rsa")

    fname = os.path.join(home,".s3cfg")
    if os.path.isfile(fname) and os.access(fname, os.R_OK):
        copyanything(fname,"shared/s3cfg")

    apt = "/etc/apt/sources.list.d/cloudant-private-apt-repo-source.list"
    if os.path.isfile(apt) and os.access(apt, os.R_OK):
        cmd = "cat " + apt + " | awk -F'@s3' '{print $1}' | awk '{print $2}' | cut -c 6-"
        with open('shared/s3keys', 'w') as f:
            _, _ = sp.Popen(cmd, stdout=f, shell=True).communicate()

    jenkins_images_dirs = ['jenkins-base', 'jenkins-local']
    for i in jenkins_images_dirs:
        _, dirs, _ = os.walk(i).next()
        for j in dirs:
            cur = os.path.join(i, j, "shared")
            copyanything("shared", cur)

            # Generate private apt repo source file if required
            if j not in OS.keys() or OS[j][0] not in ['debian', 'ubuntu']:
                continue

            f = open(os.path.join(cur, 'cloudant-private-apt-repo-source.list'), 'w')
            f.write('deb s3://{}@s3.amazonaws.com/cloudant-private-apt-repo-{} {} main\n'.format(
                    open("shared/s3keys", 'r').read().strip(), OS[j][0], j))

def convert_templates (proj_dir, ctx):
    for path, dnames, fnames in os.walk(proj_dir):
        for fname in fnames:
            if not fname.endswith(".templ"):
                continue

            with open(os.path.join(path,fname), "r") as handle:
                data = handle.read()

            codename = os.path.basename(path)
            ctx['os_codename'] = codename
            ctx['os_brand'], ctx['os_version'] = OS[codename]

            data = jinja2.Template(data, trim_blocks=True, lstrip_blocks=True).render(**ctx)

            new_fname = os.path.join(path,fname).rsplit(".",1)[0]
            with open(new_fname, "w") as handle:
                handle.write(data)
            os.chmod(new_fname, 0744)

def options():

    return [
        op.make_option("-t","--tag", metavar="TAG", default="latest",
            help="Specify the Docker TAG. Defaults to \"latest\"")
    ]

def main():
    parser = op.OptionParser(usage=USAGE, option_list=options())
    opts, args = parser.parse_args()

    if len(args) == 0:
        proj_dir = os.path.dirname(__file__)
    elif len(args) == 1:
        proj_dir = args[0]
    else:
        parser.error("Unknown arguments: " + ", ".join(args[1:]))

    setup_deps()

    ctx = {
    "docker": {
        "tag" : opts.tag
        }
    }

    convert_templates (proj_dir, ctx)

if __name__ == "__main__":
    main()
