#!/usr/bin/env python

import optparse as op
import os
import errno
import shutil
import subprocess as sp
import string
import jinja2
import yaml
import platform

USAGE = "%prog [OPTIONS]"

def copyanything(src, dst):
    if os.path.isdir(dst):
        shutil.rmtree(dst)
    elif os.path.isfile(dst):
        os.remove(dst)

    try:
        shutil.copytree(src, dst)
    except OSError as exc: # python >2.5
        if exc.errno == errno.ENOTDIR:
            shutil.copy(src, dst)
        else: raise

def setup_deps():
    home = os.path.expanduser("~")
    fname = os.path.join(home,".ssh/id_rsa")
    if os.path.isfile(fname) and os.access(fname, os.R_OK):
        shutil.copyfile(fname,"shared/id_rsa")

    fname = os.path.join(home,".s3cfg")
    if os.path.isfile(fname) and os.access(fname, os.R_OK):
        copyanything(fname,"shared/s3cfg")

    copyanything("shared","jenkins/centos6/shared")
    copyanything("shared","jenkins/squeeze/shared")
    copyanything("shared","jenkins/precise/shared")

def convert_templates (proj_dir, ctx):
    for path, dnames, fnames in os.walk(proj_dir):
        for fname in fnames:
            if not fname.endswith(".templ"):
                continue

            with open(os.path.join(path,fname), "r") as handle:
                data = handle.read()

            data = jinja2.Template(data, trim_blocks=True, lstrip_blocks=True).render(**ctx)

            new_fname = os.path.join(path,fname).rsplit(".",1)[0]
            with open(new_fname, "w") as handle:
                handle.write(data)
            os.chmod(new_fname, 0744)

def options():

    return [
        op.make_option("-t","--tag", metavar="TAG", default="latest",
            help="Specify the Docker TAG. Defaults to \"latest\"")
    ]

def main():
    parser = op.OptionParser(usage=USAGE, option_list=options())
    opts, args = parser.parse_args()

    if len(args) == 0:
		proj_dir = os.path.dirname(__file__)
    elif len(args) == 1:
       proj_dir = args[0]
    else:
        parser.error("Unknown arguments: " + ", ".join(args[1:]))

    setup_deps()

    ctx = {
		"docker": {
			"tag" : opts.tag
		}
    }

    convert_templates (proj_dir, ctx)

if __name__ == "__main__":
    main()
