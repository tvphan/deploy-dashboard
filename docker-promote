#!/usr/bin/env python

"""
docker-promote - Promotes a docker build/CI tag to a release tag (Ex. 'latest' or 'x.x.x')
"""

import optparse as op
import subprocess
import sys

USAGE = "%prog [OPTIONS] FROM_TAG TO_TAG [REPO_NAME]"

def _get_image_id(repo_name, tag, verbose=False):
    """
    Returns the docker image ID of a particular repository/tag.

    :param repo_name: The docker repository name (Ex. cloudant/base-local-centos6)
    :param tag: The docker tag of the image to retrieve (Ex. 1, 2, 3, etc.)
    :param verbose: If True, generates additional output (Default: False)

    :return: The docker image ID
    """

    func_name = sys._getframe().f_code.co_name
    if verbose:
        print ("{0}: Arg1 repo_name = {1}".format(func_name, repo_name))
        print ("{0}: Arg2 tag = {1}".format(func_name, tag))

    proc = subprocess.Popen(['docker','images'],stdout=subprocess.PIPE)
    while True:
        line = proc.stdout.readline().rstrip()
        if line != '':
            fields = line.split()
            if verbose:
                print ("{0}: Processing {1}". format(func_name, fields))
            if ((fields[0] == repo_name) and (fields[1] == tag)):
                if verbose:
                    print ("{0}: Returning image ID {1}".format(func_name, fields[2]))
                return fields[2]
        else:
            break

def _create_tag(repo_name, from_tag, to_tag, verbose=False):
    """
    Create a new tag for a given docker repository (Ex. latest)

    :param repo_name: Name of the docker repository (Ex. cloudant/base-local-centos6).
    :param from_tag: The docker tag of the images to be promoted (Ex. dev).
    :param to_tag: The docker tag of the newly promoted image (Ex. latest).
    :param verbose: If True, generates additional output (Default: False)

    :return: Nothing
    """

    func_name = sys._getframe().f_code.co_name
    if verbose:
        print ("{0}: Arg1 repo_name = {1}".format(func_name, repo_name))
        print ("{0}: Arg2 from_tag = {1}".format(func_name, from_tag))
        print ("{0}: Arg3 to_tag = {1}".format(func_name, to_tag))

    if verbose:
        print ("{0}: Promoting {1}:{2} to tag {3}".format(func_name, repo_name, from_tag, to_tag))

    image_id = _get_image_id(repo_name, from_tag, verbose)
    proc  = subprocess.Popen(['docker','run','-d',image_id],stdout=subprocess.PIPE)
    container_id = proc.stdout.readline().rstrip()
    if verbose:
        print ("{0}: Container ID = {1}".format(func_name, container_id))

    subprocess.call(['docker','commit',container_id,repo_name+":"+to_tag],stdout=subprocess.PIPE)
#    subprocess.call(['docker','rm','-f', container_id],stdout=subprocess.PIPE)

def _promote_all(from_tag, to_tag, verbose=False):
    """
    Promotes all images with a given tag

    :param from_tag: The docker tag of the images to be promoted (Ex. dev).
    :param to_tag: The docker tag of the newly promoted images (Ex. latest).
    :param verbose: If True, generates additional output (Default: False).

    :return: List of orphaned image ids.
    """
    func_name = sys._getframe().f_code.co_name
    proc = subprocess.Popen(['docker','images'],stdout=subprocess.PIPE)
    while True:
        line = proc.stdout.readline().rstrip()
        if line != '':
            fields = line.split()
            if verbose:
                print ("{0}: Processing {1}". format(func_name, fields))

            if ((fields[1] == from_tag)):
                _create_tag (fields[0], from_tag, to_tag, verbose)
        else:
            break

def _options():
    """
    Returns program options.

    :return: List of options.
    """

    return [
        op.make_option("-v", "--verbose", dest="verbose", default=False,
                       action="store_true", help="Enable verbose output.")
    ]

def main():
    parser = op.OptionParser(usage=USAGE, option_list=_options())
    opts, args = parser.parse_args()
    if len(args) == 0 or len(args) < 2:
		parser.error("Minumum of 2 arguments required")
    else:
        from_tag = args[0]
        to_tag = args[1]
        if len(args) > 2:
            _create_tag(args[2], from_tag, to_tag, opts.verbose)
        else:
            _promote_all(from_tag, to_tag, opts.verbose)

if __name__ == "__main__":
    main()
